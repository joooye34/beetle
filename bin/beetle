#!/usr/bin/env node
var ps = require('path');
var fs = require('fs');
var Beetle = require('../lib/beetle')
var argv = require('commander');
var dir = process.cwd();

argv.usage('[options] <file ...>')
    .version(require('../package.json').version)
    // .option('-v, --version', 'output the version number', require('../package.json').version)
    .option('-p, --path <path>', 'file or folder path to format', parsePath, dir)
    // .option('-o, --output <output>', 'target file to save', parsePath, dir)
    .option('-d, --deep [value]', 'folder deep to format', parseDeep, 1)
    .parse(process.argv);

format(argv.path, argv.path, argv.deep);

function parsePath(val){
  if(val[0] == '/') return val;
  return dir + '/' + val;
}
function parseDeep(val){
  var i = parseInt(val);
  if(i > 0) return i;
  else return Infinity;
}

function formatFile(path, target){
  if(ps.extname(path).toLowerCase() != '.coffee') return;

  console.log('start format file:' + path);
  var fileStr = fs.readFileSync(path, 'utf8');
  var beetle = new Beetle(fileStr);
  fileStr = beetle.replaceDefine().formatRequires().getFileString();

  if(!target) target = path;
  fs.writeFileSync(target, fileStr, 'utf8');
  console.log('end format file:' + path);
}
function formatFolder(path, deep){
  if(deep > 0){
    console.log('start format folder:' + path);
    var files = fs.readdirSync(path);
    for(var i=0; i<files.length;i++){
      var childPath = path + '/' + files[i];
      var stat = fs.lstatSync(childPath);
      if(stat.isDirectory()){
        formatFolder(childPath, deep - 1);
      }else{
        formatFile(childPath);
      }
    }
    console.log('end format folder:' + path);
  }
}
function format(path, target, deep){
  var stat = fs.lstatSync(path);
  if(stat.isDirectory()){
    formatFolder(path, deep);
  }else{
    formatFile(path, target);
  }
}
